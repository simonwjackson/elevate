#!/usr/bin/env bash

VERSION="__VERSION__"

set -euo pipefail

BASE_DIR=${BASE_DIR:-$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")}

source "${BASE_DIR}/log.sh"
source "${BASE_DIR}/utils.sh"
source "${BASE_DIR}/calculate.sh"
source "${BASE_DIR}/display.sh"
source "${BASE_DIR}/network.sh"
source "${BASE_DIR}/moonlight_session.sh"

_nc() {
  nc "$@"
}

declare -A CONFIG

validate_env() {
  [[ "$XDG_SESSION_TYPE" == "wayland" || -n "${DISPLAY:-}" ]] || {
    error "Neither Wayland nor X11 session detected. A graphical environment is required."
    return 1
  }

  return 0
}

initialize_config() {
  # Check if CONFIG is already declared
  if ! declare -p CONFIG &>/dev/null; then
    declare -gA CONFIG
  fi

  CONFIG=(
    [max_resolution]=""
    [min_resolution]="256x256" # Hard limit from moonlight
    [max_fps]=65536
    [min_fps]=30
    [max_bitrate]=0
    [max_latency]=-1
    [resolution_steps]=9
    [fps_steps]=1
    [host]=""
    [app]=""
    [log_file]=/tmp/moonbeam.log
    [extra_moonlight_options]=""
    [dry_run]="${DRY_RUN:=false}"
    [reconnect]=false
    [priority]=fps
  )
}

usage_doc="Moonlight optimization for Linux nomads

Usage:
  $(basename "$0") [options] stream <host> <app>

Moonbeam Options:
  --1080                                       Force a 1920x1080 resolution
  --1440                                       Force a 2560x1440 resolution
  --2K                                         Force a 2048x1080 resolution
  --360                                        Force a 640x360 resolution
  --480                                        Force a 854x480 resolution
  --4K                                         Force a 3840x2160 resolution
  --540                                        Force a 960x540 resolution
  --720                                        Force a 1280x720 resolution
  --900                                        Force a 1600x900 resolution
  --bitrate <bitrate>                          Available bitrate in Kbps (default: calculated from max resolution and FPS)
  --dry-run                                    Show the Moonlight command without executing it
  --fps <fps>                                  Set both min and max FPS (e.g., 60)
  --log-level <level>                          Set log level (QUIET, SIMPLE, INFO, WARN, DEBUG, TRACE, VERBOSE)
  --max-fps <fps>                              Maximum FPS (e.g., 120)
  --max-latency <ms>                           Maximum allowed latency in milliseconds
  --max-resolution <WxH>                       Maximum resolution (e.g., 1920x1080)
  --min-fps <fps>                              Minimum FPS (e.g., 30)
  --min-resolution <WxH>                       Minimum resolution (e.g., 640x360)
  --priority <resolution|fps>                  Prioritize resolution or FPS in optimization (default: fps)
  --reconnect                                  Automatically reconnect if the stream is disconnected
  --resolution <WxH>                           Set both min and max resolution (e.g., 1920x1080)
  --resolution-steps <steps>                   Number of steps for resolution scaling (default: 128)
  --version                                    Show version information
  -h, --help                                   Show this help message

Moonlight Options:
  --absolute-mouse                             Use remote desktop optimized mouse control.
  --audio-config <audio-config>                Select audio config: 5.1-surround/7.1-surround/stereo.
  --audio-on-host                              Use audio on host PC.
  --background-gamepad                         Use background gamepad input.
  --capture-system-keys <capture-system-keys>  Select capture system key combos: always/fullscreen/never.
  --display-mode <display-mode>                Select display mode: borderless/fullscreen/windowed.
  --frame-pacing                               Use frame pacing.
  --game-optimization                          Use game optimizations.
  --hdr                                        Use HDR streaming.
  --keep-awake                                 Use prevent display sleep while streaming.
  --mouse-buttons-swap                         Use left and right mouse buttons swap.
  --multi-controller                           Use multiple controller support.
  --mute-on-focus-loss                         Use mute audio when Moonlight window loses focus.
  --no-absolute-mouse                          Do not use remote desktop optimized mouse control.
  --no-audio-on-host                           Do not use audio on host PC.
  --no-background-gamepad                      Do not use background gamepad input.
  --no-frame-pacing                            Do not use frame pacing.
  --no-game-optimization                       Do not use game optimizations.
  --no-hdr                                     Do not use HDR streaming.
  --no-keep-awake                              Do not use prevent display sleep while streaming.
  --no-mouse-buttons-swap                      Do not use left and right mouse buttons swap.
  --no-multi-controller                        Do not use multiple controller support.
  --no-mute-on-focus-loss                      Do not use mute audio when Moonlight window loses focus.
  --no-performance-overlay                     Do not use show performance overlay.
  --no-quit-after                              Do not use quit app after session.
  --no-reverse-scroll-direction                Do not use inverted scroll direction.
  --no-swap-gamepad-buttons                    Do not use swap A/B and X/Y gamepad buttons (Nintendo-style).
  --no-touchscreen-trackpad                    Do not use touchscreen in trackpad mode.
  --no-vsync                                   Do not use V-Sync.
  --packet-size <packet-size>                  Specify video packet size to use.
  --performance-overlay                        Use show performance overlay.
  --quit-after                                 Use quit app after session.
  --reverse-scroll-direction                   Use inverted scroll direction.
  --swap-gamepad-buttons                       Use swap A/B and X/Y gamepad buttons (Nintendo-style).
  --touchscreen-trackpad                       Use touchscreen in trackpad mode.
  --video-codec <video-codec>                  Select video codec: AV1/H.264/HEVC/auto.
  --video-decoder <video-decoder>              Select video decoder.
  --vsync                                      Use V-Sync.

Arguments:
  stream                     Start stream
  <host>                     The host to stream to
  <app>                      The application to stream

Note:
  - If --max-fps is not provided, it will be determined based on the current display's refresh rate
  - If --bitrate is not provided, it will be calculated based on max resolution and FPS
  - Latency will be automatically detected
"

validate_resolution_options() {
  local resolution_options="resolution 360 480 540 720 900 1080 1440 360p 480p 540p 720p 900p 1080p 1440p 2K 4K"

  # Check for incompatible max_resolution option
  if [ -n "${args[max_resolution]:-}" ]; then
    for option in $resolution_options; do
      if [ -n "${args[$option]:-}" ]; then
        error "Incompatible options: --max-resolution cannot be used with --resolution or shorthand resolution options"
        return 1
      fi
    done
  fi

  # Check for multiple resolution options
  local option_set=""
  local selected_option=""
  for option in $resolution_options; do
    if [ -n "${args[$option]:-}" ]; then
      if [ -n "$option_set" ]; then
        error "Only one resolution option can be set at a time."
        return 1
      else
        option_set="true"
        selected_option="$option"
      fi
    fi
  done

  # If we reach here, validation passed
  return 0
}

validate_user_input() {
  local -A args
  convert_args_to_assoc_array args "$@"

  # Debug: Print all arguments
  for key in "${!args[@]}"; do
    debug "Argument: $key = ${args[$key]}"
  done

  # Validate incompatible resolution options
  validate_resolution_options || exit 1

  # Validate stream command arguments
  if [[ "${args[0]:-}" == "stream" && ! "${args[help]:-}" == "true" ]]; then
    if [[ -z "${args[1]:-}" || -z "${args[2]:-}" ]]; then
      error "Missing required arguments: stream <host> <app>"
      return 1
    fi
  fi

  # Check if bandwidth is provided or if iperf3 is available
  if [[ -z "${args[bitrate]:-}" && -z "${args[max_bitrate]:-}" ]]; then
    if ! _nc -z "${CONFIG[host]}" 31347 &>/dev/null; then
      error "Bandwidth detection failed. Run iperf3 on ${CONFIG[host]}:31347 or use --max-bandwidth"
      exit 1
    fi
  fi

  # Validate resolution_steps
  if [[ -n "${args[resolution_steps]:-}" && ! "${args[resolution_steps]}" =~ ^[0-9]+$ ]]; then
    error "Resolution steps must be a positive integer"
    return 1
  fi

  # Validate bitrate or max-bitrate
  if [[ -n "${args[bitrate]:-}" ]]; then
    local converted_bitrate
    converted_bitrate=$(convert_bitrate_value "${args[bitrate]}" 2>/dev/null)
    if [[ ! "$converted_bitrate" =~ ^[0-9]+$ ]]; then
      error "Invalid bitrate value: ${args[bitrate]}"
      return 1
    fi
  elif [[ -n "${args[max_bitrate]:-}" ]]; then
    local converted_max_bitrate
    converted_max_bitrate=$(convert_bitrate_value "${args[max_bitrate]}" 2>/dev/null)
    if [[ ! "$converted_max_bitrate" =~ ^[0-9]+$ ]]; then
      error "Invalid max-bitrate value: ${args[max_bitrate]}"
      return 1
    fi
  else
    debug "Neither bitrate nor max-bitrate is set. It will be calculated based on max resolution and FPS."
  fi

  debug "User input validation completed successfully"
  return 0
}

set_early_log_level() {
  # Initialize LOG_LEVEL with a default value
  LOG_LEVEL="SIMPLE"

  # Check command-line arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --log-level)
      if [[ -n "${2:-}" ]]; then
        LOG_LEVEL="$2"
        validate_and_set_log_level "$LOG_LEVEL"
        export LOG_LEVEL
        trace "Log level set from command-line argument: $LOG_LEVEL"
        return 0
      else
        debug "No log level provided after --log-level"
        return 1
      fi
      ;;
    esac
    shift
  done

  # If no --log-level argument was found, set and export the default
  validate_and_set_log_level "$LOG_LEVEL"
  export LOG_LEVEL
  trace "No --log-level specified, using default: $LOG_LEVEL"
  return 0
}

process_args() {
  if [ $# -eq 0 ]; then
    echo "$usage_doc"
    exit 0
  fi

  handle_non_stream_command() {
    local moonlight_cmd="moonlight $*"
    eval "$moonlight_cmd"
  }

  if [[ ! " $* " =~ " stream " ]] && [[ ! " $* " =~ "--version" ]]; then
    local moonlight_cmd="moonlight $*"
    handle_non_stream_command "$@" |
      sed \
        -e 's/Moonlight/Moonbeam/g' \
        -e "s/moonlight/$(basename "$0")/g"
    exit $?
  fi

  if [[ "$1" == "stream" ]] && [[ "$*" =~ "--help" ]]; then
    echo "$usage_doc"
    exit 0
  fi

  while [[ $# -gt 0 ]]; do
    case $1 in
    --version)
      echo "Moonbeam version $VERSION"
      exit 0
      ;;
    --max-latency)
      set_config "max_latency" "$(convert_latency_value "$2")"
      shift 2
      ;;
    --bitrate | --max-bitrate)
      set_config "max_bitrate" "$(convert_bitrate_value "$2")"
      shift 2
      ;;
    --max-resolution)
      set_config "max_resolution" "$(convert_shorthand_resolution "$2")"
      shift 2
      ;;
    --min-resolution)
      set_config "min_resolution" "$(convert_shorthand_resolution "$2")"
      shift 2
      ;;
    --resolution)
      set_config "max_resolution" "$(convert_shorthand_resolution "$2")"
      set_config "min_resolution" "$(convert_shorthand_resolution "$2")"
      shift 2
      ;;
    --resolution-steps)
      CONFIG[resolution_steps]="$2"
      shift 2
      ;;
    --360* | --480* | --540* | --720* | --900* | --1080* | --1440* | --2K | --4K)
      set_config "max_resolution" "$(convert_shorthand_resolution "$2")"
      set_config "min_resolution" "$(convert_shorthand_resolution "$2")"
      shift
      ;;
    --max-fps)
      set_config "max_fps" "$2"
      shift 2
      ;;
    --min-fps)
      set_config "min_fps" "$2"
      shift 2
      ;;
    --fps)
      set_config "min_fps" "$2"
      set_config "max_fps" "$2"
      shift 2
      ;;
    --fps-steps)
      CONFIG[fps_steps]="$2"
      shift 2
      ;;
    --priority)
      set_config "priority" "$2"
      shift 2
      ;;
    --log-level)
      shift 2
      ;;
    --dry-run)
      set_config "dry_run" true
      shift
      ;;
    --reconnect)
      set_config "reconnect" true
      shift
      ;;
    stream)
      set_config "host" "$2"
      set_config "app" "$3"
      shift 3
      ;;
    *)
      # If it's not a recognized option, assume it's a Moonlight option and pass it through
      CONFIG[extra_moonlight_options]+=" $1"
      shift
      ;;
    esac
  done
}

generate_missing_config() {
  set_config "max_resolution" "${CONFIG[max_resolution]:-$(get_display_resolution)}"
  set_config "min_resolution" "$(
    minimum_viable_resolution "${CONFIG[max_resolution]}" "${CONFIG[min_resolution]:-}"
  )"

  set_config "max_fps" "$(get_effective_max_fps "${CONFIG[max_fps]:-}")"
  set_config "min_fps" "${CONFIG[min_fps]:-$(find_factors_in_range "${CONFIG[min_fps]}" "${CONFIG[max_fps]}" "${CONFIG[fps_steps]}" 1)}"
}

main() {
  set_early_log_level "$@"
  validate_env
  initialize_config
  process_args "$@"
  generate_missing_config
  validate_user_input "$@"
  run_moonlight_session CONFIG
}

# Only run the main function if the script is being executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
